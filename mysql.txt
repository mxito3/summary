数据库笔记
数据库：database
数据库系统:DBS(database system)是一种虚拟系统，将多种内容关联起来称呼。
DBS=DBMS+DB
数据库系统=数据库管理系统:专门管理数据库（database manager system）+数据库（database）
DBA:database administrator数据库管理员
行/记录:row/record,本质是一个东西，行是从结构的角度出发，记录是从数据的角度出发
列/字段:column/field,本质也是一个东西，，，，，，
SQL:Structured Query Language (结构化查询语言)
SQL分为三个部分：
  DDL:Data Definition Language,数据定义语言，用来维护存储数据的结构（数据库，表）
代表指令：create，drop，alter等。
  DML:Data Manipulation Language,数据操作语言， 用来对数据进行操作（数据表中的内容），
代表指令：insert，delect，update等，其中DML又单独进行了一个分类：DQL（Data Query Language:数据查询语言，如select）。
  DCL：Data Control Language,数据控制语言，主要负责权限管理（用户），代表指令：grant，revoke等。
完整性约束：表内和表之间（实体）
SQL是关系型数据库的操作指令（SQL是一种约束，但不强制，类似于W3C）
MYSQL数据库
MYSQL数据库是一种c/s结构的软件：客户端/服务端，若想使用服务器必须通过客户端（服务器一直运行），客户端在需要时才运行

交互方式：
1.客户端连接认证：连接服务器，认证身份：mysql.exe -hPup（.进入cmd		命令：mysql.exe -hlocalhost -p3306 -uroot -p“密码
2.发送SQL指令。
3.服务器接收指令，处理SQL指令，返回结果
4.客户端接收结果，显示结果
5.断开连接（释放资源：服务器并发限制）exit/quit/\q
Mysql服务器内部对象分为了四层：系统（DBMS）->数据库（DB）->数据表（table）字段（field）->数据（data）

SQL的基本操作
基本操作：CRUD
将SQL的基本操作根据操作对象分为三类：库操作，表操作（字段），数据操作。

-- 双中划线+空格：注释（单行注释），也可以使用#号
-- 创建数据库
create database mydb charset utf8;


也可以使用中文创建数据库，但要注意：




1.查看数据库
语法：show databases;
2.查看指定部分的数据库：模糊查询
语法：show databases like ‘pattern’;     --pattern是匹配模式
%：表示匹配多个字符
_:表示匹配单个字符
举例：

3.查看数据库的创建语句：
注意：如果数据库名字是关键字则需要使用反引号，建议不使用
语法：show create database 数据库名字；
举例：

4.修改（更新）数据库：
数据库名字不可以修改，仅限于修改库选项：字符集和校对集（校对集依赖与字符集）
基本语法：
Alter database 数据库名字 [库选项]；
库选项：
Charset /character set [=] 字符集     (等号可用也不可用)
Collate [=] 校对集
举例：

5.删除数据库:
语法：drop database 数据库名字；
6.表操作：（表和字段是密不可分的）新增数据表
Create table [if not exists] 表名（
字段名字 数据类型，
字段名字 数据类型...）[表选项];

If not exists:如果表名不存在，那么就创建，否则不执行创建代码：检查功能
表选项（控制表的表现）：
     字符集：charset/character set 字符集；   --保证表中的数据存储的字符集
     校对集：collate 校对集；
     存储引擎：engine 具体存储引擎（innodb和myisam）
 	
任何一个表的设计都必须指定数据库
解决方案1.显式的指定表所属的数据库
Create table 数据库名.表名（）；  -- 将当前数据表创建到指定数据库中


方案2.隐式的指定所属的数据库：先进入到某个数据库环境，然后这样创建的数据表自动归属到某个指定的数据库中。
进入数据库环境： use 数据库名字；


当创建数据表的SQL语句执行后，到底发生了什么？
1.指定数据库下已经存在对应的表
2.在数据库的对应文件夹下，会产生对应表的结构文件（跟存储引擎有关）
7.查看数据表
1）查看所有表：show tables；

2）查看部分表，模糊匹配：show tables like ‘pattern’;

3).查看表的创建语句：show create table 表名；  -- \g等价于；号



4）。查看表结构：查看表中的字段信息
语法：desc/describe/show columns from 表名；
三种查看方式：


8.修改数据表：
表本身存在，换包含字段，修改表可分为两部分：修改表本身和修改字段
1）.修改表名：rename table 老表名 to 新表明；



2）.修改表选项：字符集，校对集，存储引擎
语法：alter 表名 表选项  [=] 值
3）修改字段：新增，删除，重命名，修改。


举例：



修改字段：
Alter table 表名 modify 字段名 数据类型 [属性] [位置];

重命名字段：alter table 表名 change 旧子段名 新字段名 数据类型 [属性] [位置]；
删除字段：alter table 表名 drop 字段名；
删除数据表
Drop table 表名1，表名2...；   -- 可以删除多张表
数据操作
1.新增数据：
基本语法：

举例：






2.查看数据：
Select */字段列表 from 表名 [where条件];    --代表查看所有数据
举例：


3.更新数据：(数据更新有时候不一定成功)
基本语法：update 表名 set 字段=值 [where条件];     --建议由where语句，不然会更新全部数据。
举例：

4.删除数据：
Delete from 表名 [where语句]；     例：delete from my_student where id=1;

查看服务器到底识别那些字符集？
Show character set;

查看服务器默认的与客户端交互的字符集： show variables like ‘character_set%’;



改变服务器默认的接收的字符集：set character_set_client 字符集；
修改服务器给定数据的字符集：set character_set_resluts 字符集；
Set 变量=值；修改只是回话级别（当前客户端，当次连接有效，关闭失效）




Character_set_connection是字符集转变的中间者，如果统一了效率更高，不统一也没有问题。
校对集问题
校对集：数据比较的方式。
校对集有三种格式：
_bin:binary,二进制比较，取出二进制，一位一位的比较，区分大小写
_cs:case sensitive:大小写敏感，区分大小写。
_ci:case insensitive:大小写不敏感，不区分大小写。
查看数据库所支持的校对集：show collation;
校对集的比较：根据某个字段进行排序：order by  字段名 [asc|desc]; asc升序，desc降序，默认升序。
注意：校对集必须在没有数据之前声明好，如果有了数据，再去修改校对集，则修改无效。
例如：

解决乱码问题：



数据类型：
SQL中将数据类型分为三大类：数值类型，字符串类型，时间日期类型
1.数值型数据：都是数值。
系统将数值型分为整数型和小数型
整数型：存放整型的数据，在SQL中因为哟啊考虑节省磁盘空间，所以有分为5类：

Tinyint:迷你整型，使用一个字节来存储，表示的状态最多为256种(常用)
Smallint:小整型，使用两个字节来存储，表示的状态最多为65536种
Mediumint:中整型，使用三个字节来存储，表示的状态为2的24次方种。
Int：标准整型，使用4个字节来存储(常用)
Bigint:大整型，使用8个字节来存储。
SQL中的数值类型全部默认有符号（分正负），有时候需要使用无符号数据，需要给数据类型加限制：int unsigned;  -- 表示无符号

显示宽度没有特别的和含义，只是默认的告诉用户可以显示的形式而已，实际上用户可以控制，这种控制不会改变数据本身的大小。
显示宽度的意义：在于当数据不够显示宽度的时候，会自动让数据变成相应的显示宽度，通常前面需要搭配一个前导0来增加宽度，不改变值的大小：zerofill（零填充）。

小数型
SQL中将小数型细分为两类：浮点型和定点型。
浮点型：小数点浮动。精度有限，而且会丢失数据。
定点型：小数点固定。精度固定，而且不会丢失数据。

浮点型：是一种精度数据，因为超出范围以后，自动丢失数据（会四舍五入）
理论上分为两种精度：
Float：单精度，占用4个字节存储数据，精度范围大概为7位左右。
Double：双精度，占用8个字节存储数据，精度范围大概为15位左右。
创建浮点数表：浮点的使用方式，直接float表示没有小数部分，float（M,D）,
M表示数据的总长度，D表示数据的小数部分长度，这就表示整数部分的长度为M-D.


插入数据可以直接是小数，也可以是科学计数法。
浮点型数据的插入：整数部分不能超出范围，小数部分可以超出范围（系统会自动四舍五入）。
定点型（decimal）
绝对的保证整数部分不会被四舍五入（不会丢失精度），小数部分有可能会被四舍五入。
(操作的时候出现警告可以用show warnings来查看警告)。
如果浮点数进位导致溢出可以，定点数不可以。
时间日期类型
Datetime：时间日期，表示的范围是从1000-9999年，有0值,格式为YYYY-mm-dd HH:ii:ss
，即0000-00-00 00:00:00
Date：日期，即datetime的日期部分。
Time：时间（段），指定的某个区间之间，-时间到+时间。
Timestamp：时间戳，但并不是时间戳，是从1970年开始，格式为YYYY-mm-dd HH:ii:ss,与datetime格式完全一致。
Year：年份，两种形式。year(2)和year(4)1901-2155年两种形式。
举例：

注意：year的时间插入可以是两位数的插入也可以是四位数的插入。

注意：timestamp：只要当前记录被更新，该字段会自动更新为当前时间。

字符串类型：
在SQL中，将字符串分为6类，char,varchar,text,blob,enum,set.
定长字符串（char）：
磁盘（二维表）在确定结构的时候，已经确定了最终存储数据的长度。
Char(L):L代表存储的长度，单位为字符，最长存储长度为255。
Char(4):在utf8的环境中，需要4*3=12个字节。
变长字符串（varchar）:
再分配空间时，按最大长度来分配，但实际用了多少，是根据具体的数据来确定。
Varchar(L)L代表字符长度，理论长度为65536个字符。但是一般会多出1到2个字节来确定实际存储需要的长度。但是如果实际数据长度超过了255，既不是用定长，也不是用变长，使用文本字符串text。
Varchar（10）：在utf8的环境下，需要10*3+1=31个字节，（以255来确定扩展1个还是2个字节）。
定长与变长的存储空间（utf8）
实际存储数据	Char(4)	Varchar()	char占用字节	Varchar占用字节
ABCD	ABCD	ABCD	3*4=12	3*4+1=13
A	A	A	3*4=12	1*3+1=4
ABCDE	×	×	数据超过长度	数据超过长度

如何选择定长字符串还是变长字符串？
定长磁盘空间比较浪费，但是效率高。如果数据基本数据的基本长度都一样，就是使用定长，如省份证，电话号码。
变长磁盘空间比较节省，但是效率低。如果数据长度不能确定 （不同数据有变化）。如姓名，地址等。
文本文字类型
如果数据非常大，通常超过255个字符就会使用文本字符串
Text:存储文本（二进制数据通常是路径）
Blob:存储二进制（通常不用管）
枚举字符串
枚举的使用方式：
定义：enum(可能出现的元素的列表)， 如enum(‘男’,‘女’.....);
使用：存储数据，只能储存上面定义好的数据。

加入数据：作用之一：规范数据格式：数据只能是规定数据中的一个。

作用之二：
节省存储空间（枚举通常有一个别名：单选框）：枚举实际存储的是数值而不是字符串本身。
在MySQL中，系统也是会自动转换数据格式的：而且基本与PHP一样（尤其是字符串转数字）。

证明字段存储的数据：把数据取出来+0就可以判断是字符串还是数值：如果最终结果为0，则为字符串，如果最终为其他数值，则存储的是数据。

枚举元素按照出现的顺序，编号从1开始。


因为枚举直接插入的是数值，所以可以直接插入数值。


集合字符串
集合和枚举实际存储的是数值而不是字符串。
集合使用方式：
定义：Set(元素列表)
使用：可以使用元素列表中分多个元素，使用逗号分隔。
插入的数据必须是创建表时的元素之一

查看数据：数值+数据查看；
之前创建的表为：create table my_set(hobby set(‘篮球’,’足球’,’羽毛球’,’跑步’,’音乐’))charset utf8;

集合中每一个元素都对应一个二进制位，被选中为1，没有被选中为0.最后将得到的二进制数据再反过来。
如上图所示，3 的意义：因为篮球和足球被选中，所以它对应集合，即11000,然后将其反过来就是00011这个二进制数，即为数值3.

如上示图片，插入数据31，表示对表中的元素全选，每个元素所对应的二进制位为1，即00011111，所以输出的元素就为所有元素。
注意：集合插入的元素没有顺序关系，系统最终会自动调整匹配顺序。

集合的强大在于可以规范数据和节省磁盘空间。
MySQL中的纪录长度
mysql总规定：任何一条记录的长度都不能超过65535个字节。（varchar永远也达不到理论值）
Varchar实际长度能达到多少？看字符集编码。
utf8下varchar的顶配：21844个字符。
Gbk下varchar的顶配：32788个字符。

想完整的使用完varchar的65535个字节，即再需要加一个tinyint字段即可。


Mysql的记录中：如果有任何字段的值为空，系统会自动给一个字节的长度来存储null值，（若想释放null值所占的字节的空间，就必须保证这个字段的值不为空）。


Mysql中text文本字符串，不占用纪录长度，额外存储。但是text文本字符串也是属于记录的一部分，一定需要占据记录中的部分长度：10个字节。
列属性
真正约束列属性的数据类型，但数据类型的约束很单一，需要一些额外的约束，来更加保证数据的合法性。
列属性：null/not null,default,primary key,unique key,auto_increment,comment.
空属性：
Null（默认）/not null:虽然默认的数据库的每个字段的值为null，但实际开发中药尽可能的保证每个字段的数据不为空，因为空数据没有意义，空数据无法参与数据运算，


列描述
列描述comment，是专门用来描述子段，没有实际意义，会根据表创建语句进行保存，，用来给程序员后数据管理员进行理解的。


然后通过 show create table 表名；这条语句就可以查看列描述。

默认值
默认值：某一种数据会经常性的使用某一种值，可以一开始就指定好，在需要真实数据的时候，用户可以选择性的使用默认值。
关键字：default
默认值的使用：在插入数据的时候不给该字段赋值即可。
想要使用默认值，可以不去指定列表，故意不去使用字段列表，可以使用关键字default代替。
字段属性
主键，唯一键 和字增长。
主键
主键：primary key：一张表中只有一个字段可以使用对应的键，用来唯一约束该字段里的数据，不能重复，这种称之为主键。
注意：一张表中最多只能有一个主键。
增加主键
在SQL中 有很多方式可以增加主键，大体可以分为三种。（主键默认不允许为空）
第一种：在创建表的时候 ，直接在字段后加primary key关键字。

优点：非常直接，缺点：只能使用一个字段作为主键。	
第二种：在创建表的时候，在所有字段之后，使用primary key(主键字段列表)来创建主键，可以有多个字段作为主键，这时候称之为复合主键（必须至少两个字段作为主键）。


第三种：当表创建之后，没有设置主键，可以额外追加主键：通过修改表字段，也可以直接追加。
语法：alter atble 表名 add primary key(字段列表)；

追加主键的前提：表中字段对应的数据本身是独立的（不重复）。
主键约束
主键对应字段的数据不允许重复，一旦重复，数据操作失败（增和改）。
更新主键&删除主键
没有办法直接更新主键，必须先删除再增加主键。
删除主键：alter table 表名 drop primary key;
主键分类：
在实际创建表的过程中，很少使用有真实业务数据的字段作为主键（业务主键，如学号，姓名等），大部分是使用逻辑性字段（字段没有业务含义，值是什么都没有关系），将这种字段的主键称之为逻辑主键。
例：Create table student(
Id int primary key auto_increment comment ‘逻辑主键，自增长’,
Number char(20) not null comment ‘学号’,
Name varchar(20) not null comment ‘姓名’
)charset utf8;
自动增长：
自增长：当对应字段不给值，或者给默认值，或者null值的时候，会自动被系统触发，系统会从当前字段中已有的数据的最大值进行+1操作，得到一个新的不同的字段。

自增长通常跟逐渐搭配。
自增长的特点：auto_increment
1.任何一个字段要进行自增长的前提是本身是一个索引（key一栏有值）。
2.自增长字段的数据必须是整型数据。
3.一张表最多只有一个自增长。
自增长的使用：
当给定值为null或者默认值的时候会触发自动增长。
自增长如果对应的字段给定了值，则自增长会失效，但是会从最大值继续开始自增长。
如何确定下一次是什么自增长，可以通过查看表结构创建语句。
修改自增长：
自增长如果涉及到字段改变，必须先删除自增长，后增加（一张表中只有一个自增长）
修改当前已有的自增长：修改自增长的值必须必当前自增长中的最大值大，不能小，否则不能生效。
Alter table 表名 auto_increment=值；
思考:为什么自增长是从一开始？为什么每次都是自增1？
所有的系统表现（如字符集，校对集）都是由系统内部的变量进行控制的。
查看自增长对应的变量：show variables like ‘auto_increment%’;


可以通过修改上述两种变量的值来达到不同的效果：修改是对整个数据库的修改，不是对数据表而言。
Set auto_increment_increment=值；-- 修改步长。
删除自增长：
自增长是字段的一个属性，可以通过modify 来进行修改（保证子段没有auto_increment即可）
Alter table 表名 modify 字段 类型；

唯一键：
一张数据表总往往很多时候是多个字段的数据不能重复，而一张表中只有一个主键，唯一键（unique key）就可以解决表中多个字段需要唯一性约束的问题。
唯一键的本质和主键差不多，唯一键默认的允许为空，并且允许多个为空（空值不参与唯一性的比较）。
增加唯一键：
基本与主键差不多：有三种方法。
方案一：在创建表的时候，在字段之后直接跟unique/unique key;

方案二：在所有字段之后增加unique key(字段列表)；  -- 复合唯一键

方案三：在创建表之后增加唯一键。

唯一键约束
唯一键与主键本质相同，唯一的区别在于唯一键默认为空，并且可以多个为空。

如果唯一键的约束不为空，那么与主键的约束是一致的。
更新唯一键&删除唯一键
更新唯一键（先删除后增加，唯一键有多个，可以不删除）

删除唯一键：
Alter table 表名 drop unique key；  --错误：因为唯一键有多个，系统不知道删除那个
Alter table 表名 drop index 索引名字；  -- 唯一键默认使用字段名字作为索引名字。

索引
几乎所有的索引都是建立在字段之上。
索引：系统根据某种算法，将已有的数据（未来可能新增的数据），单独建立一个文件，文件能实现快速匹配数据，并且能快速找到对应表中的记录。

索引的意义
1.提升查询数据的效率.
2.约束数据的有效性（唯一性）。

增加索引的前提条件：索引本身会增加索引文件（有时候可能比数据文件还大），会非常耗费磁盘空间。
如果某个字段需要作为查询的条件使用，那么可以使用索引（一定会想办法增加索引）。
如果某个字段需要进行数据的有效性约束，也可以使用索引（如主键，唯一键）。

Mysql中提供多种索引：
1.主键索引：primary key
2.唯一键索引：unique key
3.全文索引：fulltext index
4.普通索引：index

全文索引：针对文章内部的关键字进行索引。
   全文索引最大的问题在于如何确定关键字。
     英文很容易：英文与英文单词之间么有空格。
     中文很难：没有空格，而且中文之间可以随意组合（分词:sphinx）.